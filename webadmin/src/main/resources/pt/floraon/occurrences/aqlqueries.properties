## this query should only output one taxon per record.
occurrencequery.1= \
LET taxa = (FOR v IN 0..100 INBOUND '%1$s' PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} RETURN DISTINCT v._id) \
LET taxent = DOCUMENT('%1$s') \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch IN taxa \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
                FOR u IN user FILTER u._id == un RETURN u.name \
            ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})], observerNames: usernames})

occurrencequery.2= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.observers ANY == '%1$s' \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LIMIT %2$d, %3$d \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC \
    RETURN a

occurrencequery.2b= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.uuid IN %2$s \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o]})

occurrencequery.2a= \
FOR i IN inventory \
    FILTER i.observers ANY == '%1$s' \
    LIMIT %2$d, %3$d \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        SORT o.dateInserted DESC \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        RETURN MERGE(o, {taxEnt: taxent})) \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.3= \
FOR i IN inventory \
    FILTER i._id == '%1$s' \
    LET newo = (FOR o IN i.unmatchedOccurrences \
        FILTER o.uuid != '%2$s' \
        RETURN o) \
    UPDATE i WITH {unmatchedOccurrences: newo} IN inventory \
    RETURN NEW

#SORT i.year DESC, i.month DESC, i.day DESC, i.latitude DESC \
#    LIMIT %2$d, %3$d \

occurrencequery.4= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.maintainer == '%1$s' \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT %2$d, %3$d \
    RETURN a

occurrencequery.4b= \
RETURN SUM(FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    RETURN LENGTH(i.unmatchedOccurrences) == 0 ? 1 : LENGTH(i.unmatchedOccurrences))

occurrencequery.4a= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT %2$d, %3$d \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.4a.count=RETURN SUM (FOR i IN inventory FILTER i.maintainer == '%1$s' RETURN 1)

occurrencequery.5= \
FOR i IN inventory \
    FILTER i._id IN @ids \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.6= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(i, {observerNames: usernames})

occurrencequery.6a= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o], observerNames: usernames})

occurrencequery.6a.count= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        COLLECT WITH COUNT INTO len \
        RETURN len


occurrencequery.6b= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o], observerNames: usernames})

occurrencequery.7= \
FOR i IN inventory \
    FILTER i.maintainer == @user \
    LET willupdate = (FOR o IN i.unmatchedOccurrences FILTER o.uuid IN @uuids LIMIT 1 RETURN 1) \
    FILTER LENGTH(willupdate) > 0 \
    LET alteredList = ( \
        FOR o IN i.unmatchedOccurrences \
        LET newItem = (!(o.uuid IN @uuids) ? o : MERGE(o, { taxEntMatch: @replace })) RETURN newItem) \
    UPDATE i WITH { unmatchedOccurrences:  alteredList } IN inventory

occurrencequery.7a= \
FOR i IN inventory \
    LET willupdate = (FOR o IN i.unmatchedOccurrences FILTER o.uuid IN @uuids LIMIT 1 RETURN 1) \
    FILTER LENGTH(willupdate) > 0 \
    LET alteredList = ( \
        FOR o IN i.unmatchedOccurrences \
        LET newItem = (!(o.uuid IN @uuids) ? o : MERGE(o, { taxEntMatch: @replace })) RETURN newItem) \
    UPDATE i WITH { unmatchedOccurrences:  alteredList } IN inventory
