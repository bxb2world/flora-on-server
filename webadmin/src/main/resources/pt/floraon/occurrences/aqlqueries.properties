## this query should only output one taxon per record.
occurrencequery.1= \
LET taxa = (FOR v IN 0..100 INBOUND '%1$s' PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} RETURN DISTINCT v._id) \
LET taxent = DOCUMENT('%1$s') \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch IN taxa \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
                FOR u IN user FILTER u._id == un RETURN u.name \
            ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})], observerNames: usernames})

occurrencequery.2= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.observers ANY == @observer \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT @off, @cou \
    RETURN a

occurrencequery.2.date= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.observers ANY == @observer \
        LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
        FILTER rdate >= @from && rdate <= @to \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT @off, @cou \
    RETURN a

occurrencequery.2b= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.uuid IN %2$s \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o]})

occurrencequery.2a= \
FOR i IN inventory \
    FILTER i.observers ANY == '%1$s' \
    LIMIT %2$d, %3$d \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        SORT o.dateInserted DESC \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        RETURN MERGE(o, {taxEnt: taxent})) \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.3= \
FOR i IN inventory \
    FILTER i._id == '%1$s' \
    LET newo = (FOR o IN i.unmatchedOccurrences \
        FILTER o.uuid != '%2$s' \
        RETURN o) \
    UPDATE i WITH {unmatchedOccurrences: newo} IN inventory \
    RETURN NEW

#SORT i.year DESC, i.month DESC, i.day DESC, i.latitude DESC \
#    LIMIT %2$d, %3$d \

occurrencequery.4= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.maintainer == '%1$s' \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT %2$d, %3$d \
    RETURN a

occurrencequery.4.observernames= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.maintainer == '%1$s' \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            LET usernames = i.observers == null ? null : ( \
                FILTER i.observers != null FOR un IN i.observers \
                FOR u IN user FILTER u._id == un RETURN u.name \
            ) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})], observerNames: usernames})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT %2$d, %3$d \
    RETURN a

occurrencequery.4.nouser= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT %2$d, %3$d \
    RETURN a

occurrencequery.4.nouser.observernames= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            LET usernames = i.observers == null ? null : ( \
                FILTER i.observers != null FOR un IN i.observers \
                FOR u IN user FILTER u._id == un RETURN u.name \
            ) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})], observerNames: usernames})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT %2$d, %3$d \
    RETURN a

occurrencequery.4b= \
RETURN SUM(FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    RETURN LENGTH(i.unmatchedOccurrences) == 0 ? 1 : LENGTH(i.unmatchedOccurrences))

occurrencequery.4b.nouser= \
RETURN SUM(FOR i IN inventory \
    RETURN LENGTH(i.unmatchedOccurrences) == 0 ? 1 : LENGTH(i.unmatchedOccurrences))

occurrencequery.4a= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT %2$d, %3$d \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.4a.nouser= \
FOR i IN inventory \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT %2$d, %3$d \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.4a.count=RETURN SUM (FOR i IN inventory FILTER i.maintainer == '%1$s' RETURN 1)
occurrencequery.4a.nouser.count=RETURN SUM (FOR i IN inventory RETURN 1)

occurrencequery.5= \
FOR i IN inventory \
    FILTER i._id IN @ids \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.6= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(i, {observerNames: usernames})

occurrencequery.6a= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o], observerNames: usernames})

occurrencequery.6a.count= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        COLLECT WITH COUNT INTO len \
        RETURN len

occurrencequery.6a.nouser.count= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        COLLECT WITH COUNT INTO len \
        RETURN len

occurrencequery.6b= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o], observerNames: usernames})

occurrencequery.7= \
FOR i IN inventory \
    FILTER i.maintainer == @user \
    LET willupdate = (FOR o IN i.unmatchedOccurrences FILTER o.uuid IN @uuids LIMIT 1 RETURN 1) \
    FILTER LENGTH(willupdate) > 0 \
    LET alteredList = ( \
        FOR o IN i.unmatchedOccurrences \
        LET newItem = (!(o.uuid IN @uuids) ? o : MERGE(o, { taxEntMatch: @replace })) RETURN newItem) \
    UPDATE i WITH { unmatchedOccurrences:  alteredList } IN inventory

occurrencequery.7a= \
FOR i IN inventory \
    LET willupdate = (FOR o IN i.unmatchedOccurrences FILTER o.uuid IN @uuids LIMIT 1 RETURN 1) \
    FILTER LENGTH(willupdate) > 0 \
    LET alteredList = ( \
        FOR o IN i.unmatchedOccurrences \
        LET newItem = (!(o.uuid IN @uuids) ? o : MERGE(o, { taxEntMatch: @replace })) RETURN newItem) \
    UPDATE i WITH { unmatchedOccurrences:  alteredList } IN inventory

occurrencequery.8= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.maintainer == @user \
        LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
            || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
                || selected \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        FILTER LENGTH(occ) > 0 \
        RETURN occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT @offset, @count \
    RETURN a

occurrencequery.8.count= \
RETURN SUM(FOR i IN inventory \
        FILTER i.maintainer == @user \
        LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
            || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
                || selected \
            RETURN 1) \
        FILTER LENGTH(occ) > 0 \
        RETURN 1)

occurrencequery.8a= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
            || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
                || selected \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        FILTER LENGTH(occ) > 0 \
        RETURN occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT @offset, @count \
    RETURN a

occurrencequery.8a.count= \
RETURN SUM(FOR i IN inventory \
        LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
            || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
                || selected \
            RETURN 1) \
        FILTER LENGTH(occ) > 0 \
        RETURN 1)

occurrencequery.9= \
FOR i IN inventory \
    FILTER i.maintainer == @user \
    LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
        || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
            || selected \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    FILTER LENGTH(occ) > 0 \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT @offset, @count \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.9a= \
FOR i IN inventory \
    LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
        || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
            || selected \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    FILTER LENGTH(occ) > 0 \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT @offset, @count \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencereportquery.1= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    COLLECT WITH COUNT INTO num \
    RETURN num

occurrencereportquery.1a= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null \
        COLLECT te = o.taxEntMatch INTO byTaxon \
        LET name = DOCUMENT(te).name \
        SORT name \
        RETURN {name: name, value: LENGTH(byTaxon[*].o)}

## list of target species
occurrencereportquery.3= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            RETURN DISTINCT v

## target species with photos
occurrencereportquery.4= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null && o.hasPhoto != null && o.hasPhoto != 'No' && o.hasPhoto != '' \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            RETURN DISTINCT v

## target species with how many specimens collected
occurrencereportquery.5= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null && o.hasSpecimen > 0 \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            COLLECT te = v.name INTO byTaxon \
            RETURN {name: te, value: SUM(byTaxon[*].o.hasSpecimen)}

## list of target species with number of records of each
occurrencereportquery.6= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            COLLECT te = v.name INTO byTaxon \
            RETURN {name: te, value: LENGTH(byTaxon[*].o)}

occurrencereportquery.7= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null && o.abundance != null && o.abundance != '' \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            COLLECT te = v.name INTO byTaxon \
            RETURN {name: te, value: LENGTH(byTaxon[*].o)}

reportquery.1= \
FOR rlde IN @@redlistcollection \
    FILTER rlde.assessment.authors ANY == @user \
    FOR t IN taxent FILTER t._id == rlde.taxEntID \
    RETURN t

reportquery.1a= \
FOR rlde IN @@redlistcollection \
    FILTER rlde.assessment.evaluator ANY == @user \
    FOR t IN taxent FILTER t._id == rlde.taxEntID \
    RETURN t

reportquery.1b= \
FOR rlde IN @@redlistcollection \
    FILTER rlde.assessment.reviewer ANY == @user \
    FOR t IN taxent FILTER t._id == rlde.taxEntID \
    RETURN t
