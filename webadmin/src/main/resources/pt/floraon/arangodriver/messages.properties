ListDriver.1=\
FOR v IN GRAPH_TRAVERSAL('%1$s', \
	FOR v IN taxent FILTER v.isSpeciesOrInf==true && v.current==true && LENGTH(FOR e IN PART_OF FILTER e._to==v._id RETURN e)==0 RETURN v \
	, 'outbound', {paths:false,filterVertices:[%3$s],vertexFilterMethod:['exclude']}) COLLECT a=v[*].vertex RETURN a
ListDriver.2=FOR v IN %1$s FILTER v.territoryType=='%2$s' RETURN v._id
ListDriver.21=FOR v IN %1$s FILTER v.rank==%2$d SORT v.name RETURN v
ListDriver.22=RETURN {nodes:(FOR v IN %1$s RETURN MERGE(v,{type:PARSE_IDENTIFIER(v._id).collection})), links:[]}
ListDriver.24=aaa
ListDriver.3=FOR v IN %1$s SORT v.name RETURN v._id
ListDriver.4=FOR v IN %1$s FILTER v.showInChecklist==true SORT v.name RETURN v
ListDriver.5=FOR v IN %1$s FILTER v.territoryType=='%2$s' SORT v.name RETURN v
ListDriver.6=FOR v IN %1$s SORT v.name RETURN v
ListDriver.7=\
FOR taxon IN %2$s %5$s \
	LET npar=LENGTH(FOR v IN 1..1 INBOUND taxon PART_OF %6$s RETURN v) \
	FILTER taxon.isSpeciesOrInf==true %1$s %4$s SORT taxon.name %3$s \
	RETURN {taxent: MERGE(taxon, {leaf: npar==0}), territories: UNIQUE( \
		FOR v,e,p IN 1..100 OUTBOUND taxon EXISTS_IN,PART_OF,ANY SYNONYM,BELONGS_TO \
		FILTER HAS(v,'showInChecklist')==true \
		LET upstr=(FOR e1 IN p.edges FILTER PARSE_IDENTIFIER(e1._id).collection=='PART_OF' RETURN e1) \
		LET ns=(FOR e1 IN p.edges FILTER e1.nativeStatus\!=NULL LIMIT 1 RETURN e1) \
		LET base=(FOR e1 IN p.edges FILTER PARSE_IDENTIFIER(e1).collection=='BELONGS_TO' LIMIT 1 RETURN e1) \
		RETURN {existsId:ns[0]._id, \
			nativeStatus: ns[0].nativeStatus, \
			occurrenceStatus: ns[0].occurrenceStatus, \
			uncertainOccurrence: ns[0].uncertainOccurrenceStatus, \
			territory: v.shortName, \
			inferred: LENGTH(base)\!=0, \
			uncertain: LENGTH(upstr)\!=0, \
			taxpathlen: LENGTH(upstr) \
		} \
	) \
} 
SpeciesListWrapperDriver.0=\
FOR au IN author FILTER au.idAut==%2$d \
	UPSERT {_from:'%1$s',_to:au._id} \
	INSERT {_from:'%1$s',_to:au._id,main:%3$b} \
	UPDATE {} IN OBSERVED_BY RETURN OLD ? 0 : 1
SpeciesListWrapperDriver.1=\
FOR au IN author FILTER au.idAut==%2$d \
	UPSERT {_from:'%1$s',_to:au._id} \
	INSERT {_from:'%1$s',_to:au._id,main:%3$b} \
	UPDATE {} IN OBSERVED_BY RETURN OLD ? 0 : 1
